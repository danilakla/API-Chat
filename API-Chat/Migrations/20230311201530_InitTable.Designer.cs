// <auto-generated />
using System;
using API_Chat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Chat.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230311201530_InitTable")]
    partial class InitTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API_Chat.Model.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContactsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactsId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("API_Chat.Model.Conversations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConversationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("API_Chat.Model.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConversationsId")
                        .HasColumnType("int");

                    b.Property<string>("FromWhom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationsId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("API_Chat.Model.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactsId")
                        .HasColumnType("int");

                    b.Property<string>("FromWhom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToWhom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactsId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ContactsConversations", b =>
                {
                    b.Property<int>("ContactsId")
                        .HasColumnType("int");

                    b.Property<int>("ConversationsId")
                        .HasColumnType("int");

                    b.HasKey("ContactsId", "ConversationsId");

                    b.HasIndex("ConversationsId");

                    b.ToTable("ContactsConversations");
                });

            modelBuilder.Entity("API_Chat.Model.Contacts", b =>
                {
                    b.HasOne("API_Chat.Model.Contacts", null)
                        .WithMany("ContactFriends")
                        .HasForeignKey("ContactsId");
                });

            modelBuilder.Entity("API_Chat.Model.Messages", b =>
                {
                    b.HasOne("API_Chat.Model.Conversations", "Conversations")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("API_Chat.Model.Notifications", b =>
                {
                    b.HasOne("API_Chat.Model.Contacts", "Contacts")
                        .WithMany("Notifications")
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("ContactsConversations", b =>
                {
                    b.HasOne("API_Chat.Model.Contacts", null)
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Chat.Model.Conversations", null)
                        .WithMany()
                        .HasForeignKey("ConversationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Chat.Model.Contacts", b =>
                {
                    b.Navigation("ContactFriends");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("API_Chat.Model.Conversations", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
